// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  phone     String   @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders     Order[]
  transactions Transaction[]
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String
  image_uri  String
  products   Product[]
  address    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  image_uri   String
  price       Float
  ar_uri      String?
  description String?
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  items      Item[]
}

model Order {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  deliveryDate DateTime
  address      String?
  items        Item[]
  status       OrderStatus @default(ORDER_PLACED)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  transactions Transaction[]
}

model Item {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
}

model Transaction {
  id         Int        @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  order      Order?    @relation(fields: [orderId], references: [id])
  orderId    Int?
  paymentId  String
  orderRefId String
  status     TransactionStatus
  amount     Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

enum OrderStatus {
  ORDER_PLACED
  SHIPPING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum TransactionStatus {
  Success
  Failed
  Pending
}
