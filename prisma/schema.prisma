generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  phone        String?       @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String        @unique
  password     String
  username     String        @unique
  Address      Address[]
  cartItems    CartItem[]
  orders       Order[]
  reviews      Review[]
  transactions Transaction[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  image_uri String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  image_uri    String
  price        Float
  ar_uri       String?
  description  String?
  categoryId   Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  cartItems    CartItem[]
  items        Item[]
  category     Category      @relation(fields: [categoryId], references: [id])
  productSizes ProductSize[]
  reviews      Review[]
}

model ProductSize {
  id        Int        @id @default(autoincrement())
  productId Int
  size      String
  stock     Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
  items     Item[]
  product   Product    @relation(fields: [productId], references: [id])

  @@unique([productId, size])
}

model CartItem {
  id            Int          @id @default(autoincrement())
  userId        Int
  productId     Int
  productSizeId Int?
  quantity      Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  product       Product      @relation(fields: [productId], references: [id])
  productSize   ProductSize? @relation(fields: [productSizeId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id           Int           @id @default(autoincrement())
  userId       Int
  deliveryDate DateTime
  status       OrderStatus   @default(ORDER_PLACED)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  addressId    Int
  items        Item[]
  Address      Address       @relation(fields: [addressId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Item {
  id            Int          @id @default(autoincrement())
  productId     Int
  productSizeId Int?
  quantity      Int
  orderId       Int
  order         Order        @relation(fields: [orderId], references: [id])
  product       Product      @relation(fields: [productId], references: [id])
  productSize   ProductSize? @relation(fields: [productSizeId], references: [id])
}

model Transaction {
  id         Int               @id @default(autoincrement())
  userId     Int
  orderId    Int?
  paymentId  String
  orderRefId String
  status     TransactionStatus
  amount     Float
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  order      Order?            @relation(fields: [orderId], references: [id])
  user       User              @relation(fields: [userId], references: [id])
}

model Address {
  id        Int           @id @default(autoincrement())
  userId    Int
  nickname  String
  line1     String
  line2     String?
  city      String
  state     String
  zip       String
  country   String
  isDefault Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime
  type      TypeOfAddress
  User      User          @relation(fields: [userId], references: [id])
  Order     Order[]

  @@index([userId])
  @@unique([nickname])
}

enum OrderStatus {
  ORDER_PLACED
  SHIPPING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum TransactionStatus {
  Success
  Failed
  Pending
}

enum TypeOfAddress {
  Home
  Office
  Other
}
